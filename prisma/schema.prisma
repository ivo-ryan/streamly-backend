// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  firstName  String      @db.VarChar(255)
  lastName   String      @db.VarChar(255)
  phone      String      @db.VarChar(255)
  birth      DateTime    @db.Date()
  email      String      @unique @db.VarChar(255)
  password   String      @db.VarChar(255)
  role       UserRoles   @default(StandardUser)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  likes      Like[]
  favorites  Favorite[]
  watchTimes WatchTime[]
}

enum UserRoles {
  Admin
  StandardUser
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  position Int
  series   Series[]
}

model Series {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  synopsis     String     @db.Text
  thumbnailUrl String     @db.Text
  featured     Boolean    @db.Boolean
  categoryId   Int
  category     Category   @relation(fields: [categoryId], references: [id])
  episodes     Episode[]
  likes        Like[]
  favorites    Favorite[]
}

model Episode {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  synopsis    String      @db.Text
  order       Int
  videoUrl    String      @db.Text
  secondsLong Int
  seriesId    Int
  series      Series      @relation(fields: [seriesId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  watchTimes  WatchTime[]
}

model Like {
  userId    Int
  seriesId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  serie     Series   @relation(fields: [seriesId], references: [id])

  @@id([userId, seriesId])
}

model Favorite {
  userId    Int
  seriesId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  serie     Series   @relation(fields: [seriesId], references: [id])

  @@id([userId, seriesId])
}

model WatchTime {
  userId    Int
  episodeId Int
  seconds   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  episode   Episode  @relation(fields: [episodeId], references: [id])

  @@id([userId, episodeId])
}
